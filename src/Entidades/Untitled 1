package Entidades;

import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.util.ArrayList;

import Graficos.Spritesheet;
import Main.Game;
import World.Camera;
import World.World;

public class Player extends Entity{
	public boolean caindo, subindo,podepular,cainimation,tanoar, atacando,dash,dashS,dashS2,transformado,
	atacando2,atack2;
	public boolean right,up,left,down,parado,parando;
	public int right_dir = 0,left_dir = 1;
	public int dir = right_dir;
	public double speed = 4;
	public boolean parede;
	private int frames = 0,maxFrames = 5,index = 2,maxIndex = 8;
	private int framesPulo = 0,maxFramesPulo = 11,indexPul = 12,maxIndexPul = 12;
	private int framesCai = 0,maxFramesCai = 11,indexCai = 14,maxIndexCai = 16;
	private int framesAtk = 0,maxFramesAtk = 9,indexAtk =24,maxIndexAtk = 26;
	private int framesAtk2 = 0,maxFramesAtk2 = 9,indexAtk2 =27,maxIndexAtk2 = 29;
	private int framesDash = 0,maxFramesDash = 11,indexDash = 18,maxIndexDash = 19;
	private int framesDashS = 0,maxFramesDashS = 4,indexDashS = 18,maxIndexDashS = 21;
	public boolean moved = false;
	private BufferedImage[] rightPlayer;
	private BufferedImage[] leftPlayer;
	private BufferedImage[] direcao;
	
	private BufferedImage playerDamage;
	
	
	public boolean isDamaged = false;
	private int damageFrames = 0;
	
	public boolean shoot = false,mouseShoot = false;
	
	public double life = 100,maxlife=100, totalife=120,special = 0,maxspecial=100
			,stamina = 100,maxstamina=100;
	public int mx,my;

	public Player(int x, int y, int width, int height, BufferedImage sprite) {
		super(x, y, width, height, sprite);
		
		rightPlayer = new BufferedImage[112];
		leftPlayer = new BufferedImage[112];
		direcao = new BufferedImage[112];
		
		
		
		
		for(int i =0; i < 28; i++){
			rightPlayer[i] = Game.spritesheet.getSprite(Game.TILE_SIZE*i, 0, Game.TILE_SIZE, Game.TILE_SIZE);
			//sessao redeye
			rightPlayer[i+28] = Game.spritesheet.getSprite(Game.TILE_SIZE*i,Game.TILE_SIZE, Game.TILE_SIZE, Game.TILE_SIZE);
			//machucados
			rightPlayer[i+56] = Game.spritesheet.getSprite(Game.TILE_SIZE*i, 2*Game.TILE_SIZE, Game.TILE_SIZE, Game.TILE_SIZE);
			//demon
			rightPlayer[i+84] = Game.spritesheet.getSprite(Game.TILE_SIZE*i, 3*Game.TILE_SIZE, Game.TILE_SIZE, Game.TILE_SIZE);
		}
		
		
		
	}
	
	public void tick() {
		depth=5;
		if(transformado) {
			maxIndexDashS = 22;
		}else {
			maxIndexDashS =21;
		}
		special=00;
		transformado=false;
		if(special>maxspecial) {
			special=maxspecial;
		}
		if(atacando || atacando2) {
			if(special>maxspecial/2) {
				special+=0.3;
				//dano=15;
			}else {
				special+=0.1;
				//dano=2;
			}
		}
		if(stamina<maxstamina) {
			stamina+=0.09;
		}
		if(special>0) {
			special-=0.03;
		}
		setHitbox();
		movedX();
		movedY();
		anim();
		checkCollisionLifePack();
		projetil();
		lifesistem();
		updateCamera();
	}
	public void setHitbox() {
		//hitbox padrao
		setMask0(20,11,20,52);
		setMask2(11,60,40,3);
		//ataques melle
		if(special>maxspecial/2) {
			if(dir==right_dir) {
				if(atacando) {
					if(indexAtk!=24 ) {
						setMask1(50,20,30,10);
					}
				}else if(atacando2) {
					if(indexAtk2!=27 ) {
						setMask1(55,0,10,30);
					}
				}else {
					setMask1(20,20,30,10);
				}
			}else {
				if(atacando) {
					if(indexAtk!=24 ) {
						setMask1(-15,20,30,10);
					}
				}else if(atacando2) {
					if(indexAtk2!=27 ) {
						setMask1(-4,0,10,30);
					}
				}else {
					setMask1(20,20,30,10);
				}
			}
		}else {
			if(dir==right_dir) {
				if(atacando) {
					if(indexAtk!=24 ) {
						setMask1(40,20,30,10);
					}
				}else if(atacando2) {
					if(indexAtk2!=27 ) {
						setMask1(45,0,10,30);
					}
				}else {
					setMask1(20,20,30,10);
				}
			}else {
				if(atacando) {
					if(indexAtk!=24 ) {
						setMask1(-5,20,30,10);
					}
				}else if(atacando2) {
					if(indexAtk2!=27 ) {
						setMask1(6,0,10,30);
					}
				}else {
					setMask1(20,20,30,10);
				}
			}
		}
		
		
		
		
	}
	public void projetil() {
		
		if(shoot) {
			shoot = false;
			
			
			int dx = 0;
			int px = 0;
			int py = 6;
			if(dir == right_dir) {
				px = 18;
				dx = 1;
			}else {
				px = -8;
				dx = -1;
			}
			
			BulletShoot bullet = new BulletShoot(this.getX()+px,this.getY()+py,3,3,null,dx,0);
			Game.bullets.add(bullet);
			
		}
	}
	public void lifesistem() {
		if(life<=0) {
			//Game over!
			life = 0;
			Game.gameState = "GAME_OVER";
		}
	}
	public void movedY() {
		if(up &&podepular){
			subindo=true;
		}else {
			subindo=false;
		}
		if(!isFreeY()) {
			podepular=true;
		}
		if(subindo) {
			tanoar=true;
			framesPulo++;
			if(framesPulo == maxFramesPulo) {
				framesPulo = 0;
				if(indexPul!=14) {
					indexPul++;
					if(indexPul>maxIndexPul) {
						indexPul=14;
					}
				}else {
					indexPul=12;
					podepular=false;
					subindo=false;
				}	
			}
			y-=speed;
		}
		if(down){
			//cair da plat
		}
		if(isFreeY() && !subindo) {
			caindo=true;
		}else {
			caindo=false; 
			
		}
		if(tanoar) {
			if(!isFreeY()) {
				cainimation=true;
				tanoar=false;
			}
		}
		if(cainimation ) {
			if(left || right) {
				cainimation=false;
				framesCai=0;
				index=2;
			}
			index=17;
			framesCai++;
			if(framesCai > 20) {
				framesCai = 0;
				index=2;
				cainimation=false;
			}
				
		}
		if(caindo) {
			framesCai++;
			if(framesCai == maxFramesCai) {
				framesCai = 0;
				if(indexCai!=16) {
					indexCai++;
					if(indexCai>maxIndexCai) {
						indexCai=16;
						cainimation=true;
					}
				}else {
					indexCai=14;
					
				}	
			}
			y+=speed;
		}
	}
	public void movedX() {
		if(moved) {
			atacando=false;
			atacando2=false;
			indexAtk = 24;
			indexAtk2 = 27;
		}
		if(isFreeX()!="livre" && !parede && !isFreeY()) {
			moved=false;
			index=maxIndex+1;
			frames++;
			if(dir==left_dir) {
				if(isFreeX()!="direita") {
					x--;
				}
			}else {
				if(isFreeX()!="esquerda") {
					x++;
				}
			}
			if(frames >= 15) {
				frames = 0;
				parando=false;
				index=2;
				parede=true;
			}
			
		}
		if(parede) {
			index=2;
			moved = false;
		}
		if(dash) {
			if(dir==right_dir) {
				if(isFreeX()!="esquerda") {
					x+=8;
				}
			}else {
				if(isFreeX()!="direita") {
					x-=8;
				}
			}
		}
		if(!transformado) {
			if(dashS) {
				if(dir==right_dir) {
					if(isFreeX()!="esquerda") {
						x+=6;
					}
				}else {
					if(isFreeX()!="direita") {
						x-=6;
					}
				}
			}
			if(dashS2) {
				if(dir==right_dir) {
					if(isFreeX()!="esquerda") {
						x+=4;
					}
				}else {
					if(isFreeX()!="direita") {
						x-=4;
					}
				}
			}
		}else {
			if(dashS) {
				if(dir==right_dir) {
					if(isFreeX()!="esquerda") {
						x+=3;
					}
				}else {
					if(isFreeX()!="direita") {
						x-=3;
					}
				}
			}
			
		}
		
		if(right && isFreeX()!="esquerda") {
			moved = true;
			dir = right_dir;
			x+=speed;
		}
		if(left && isFreeX()!="direita") {
			moved = true;
			dir = left_dir;
			x-=speed;
		}
		
	}
	public void anim() {
		
		if(parando) {
			index=maxIndex+1;
			frames++;
			if(dir==left_dir) {
				if(isFreeX()!="direita") {
					x--;
				}
			}else {
				if(isFreeX()!="esquerda") {
					x++;
				}
			}
			if(frames >= 15) {
				frames = 0;
				parando=false;
				index=2;
			}
		}
		if(parado && !cainimation) {
			index=2;
		}
		if(atacando) {
			framesAtk++;
			if(framesAtk >= maxFramesAtk) {
				framesAtk = 0;
				indexAtk++;
				if(indexAtk > maxIndexAtk) {
					indexAtk = 24;
					if(transformado) {
						index=2;
					}else {
						index=23;
					}
					atacando=false;
					if(atack2) {
						atacando2=true;
						atack2=false;
					}
				}
			}
		}
		if(atacando2) {
			framesAtk2++;
			if(framesAtk2 >= maxFramesAtk2) {
				framesAtk2 = 0;
				indexAtk2++;
				if(indexAtk2 > maxIndexAtk2) {
					indexAtk2 = 27;
					if(transformado) {
						index=2;
					}else {
						index=23;
					}
					atacando2=false;
				}
			}
		}
		if(dash) {
			framesDash++;
			if(framesDash >= maxFramesDash) {
				framesDash = 0;
				indexDash++;
				if(indexDash > maxIndexDash) {
					indexDash = 18;
					dash=false;

					stamina-=15;
					if(!moved) {
						parando=true;
					}
					
				}
			}
		}
		if(dashS) {
			dash=false;
			indexDash = 18;
			framesDash = 0;
			framesDashS++;
			if(framesDashS >= maxFramesDashS) {
				framesDashS = 0;
				indexDashS++;
				if(indexDashS > maxIndexDashS) {
					if(transformado) {
						indexDashS = 23;
					}else {
						indexDashS = 22;
					}
					dashS=false;
					dashS2=true;
				}
			}
		}
		if(dashS2) {
			stamina-=1;
			dash=false;
			framesDashS++;
			if(framesDashS >= 15) {
				framesDashS = 0;
				indexDashS=18;
					dashS2=false;
				
				}
		}
		if(moved) {
			frames++;
			if(frames >= maxFrames) {
				frames = 0;
				index++;
				if(index > maxIndex) {
					index = 3;
				}
			}
		}
	}
	public void updateCamera() {
		
		Camera.x = Camera.clamp(this.getX() - (Game.WIDTH/2),0,World.WIDTH*Game.TILE_SIZE - Game.WIDTH);
		Camera.y = Camera.clamp(this.getY() -(Game.HEIGHT/2)-53,0,World.HEIGHT*Game.TILE_SIZE - Game.HEIGHT);
	}
	public String isFreeX(){
		for(int i = 0; i < Game.entities.size(); i++){
			Entity atual = Game.entities.get(i);
			
			if(atual instanceof Cenario_Interagivel) {
				if(Entity.isColidding(this,  atual,0,2)) {
					Cenario_Interagivel at2= (Cenario_Interagivel)atual;
					if(at2.tipo=="parede_invisivel") {
						return "direita";
					}
				}else if(Entity.isColidding(this,  atual,0,1)) {
					Cenario_Interagivel at2= (Cenario_Interagivel)atual;
					if(at2.tipo=="parede_invisivel") {
						return "esquerda";
					}
				}else if(Entity.isColidding(this,  atual,0,0)) {
					return "cima";
				}
				
			}
		}
		return "livre";
	}
	public boolean isFreeY(){
		for(int i = 0; i < Game.entities.size(); i++){
			Entity atual = Game.entities.get(i);
			if(atual instanceof Plataforma) {
				if(Entity.isColidding(this,  atual,0,0)) {
					return false;
				}
				
			}
			if(atual instanceof 	Cenario_Interagivel) {
				if(Entity.isColidding(this, atual,2,0)) {
					Cenario_Interagivel at2= (Cenario_Interagivel)atual;
					if(at2.tipo=="prateleira") {
						return false;
					}
				}
				
			}
			if(atual instanceof 	Cenario_Interagivel) {
				if(Entity.isColidding(this, atual,0,0)) {
					Cenario_Interagivel at2= (Cenario_Interagivel)atual;
					if(at2.tipo=="parede_invisivel") {
						return false;
					}
				}
				
			}
		}
		return true;
	}
	
	public void checkCollisionLifePack(){
		for(int i = 0; i < Game.entities.size(); i++){
			Entity atual = Game.entities.get(i);
			if(atual instanceof Lifepack) {
//				if(Entity.isColidding(this, atual)) {
//					life+=10;
//					if(life > 100)
//						life = 100;
//					Game.entities.remove(atual);
//				}
			}
		}
	}

	
	public void render(Graphics g) {
		Graphics2D g2 = (Graphics2D) g;
		Rectangle rect= new Rectangle(this.getX() - Camera.x+maskx[0],this.getY() - Camera.y+masky[0],maskw[0],maskh[0]);
		Rectangle rect2= new Rectangle(this.getX() - Camera.x+maskx[1],this.getY() - Camera.y+masky[1],maskw[1],maskh[1]);
		Rectangle rect3= new Rectangle(this.getX() - Camera.x+maskx[2],this.getY() - Camera.y+masky[2],maskw[2],maskh[2]);
		g.setColor(Color.RED);
		g2.draw(rect);
		g.setColor(Color.BLUE);
		g2.draw(rect2);
		g.setColor(Color.green);
		g2.draw(rect3);
		//g.drawImage(Game.fundo.getSprite(0, 0,1000, 750), this.getX() - Camera.x-(1000/2),this.getY() - Camera.y-(750/2), null);
		if(dir == left_dir) {
			for(int i=0;i<28*4;i++) {
				direcao[i]=inverter(rightPlayer[i]);
			}
		}else if(dir == right_dir) {
			for(int i=0;i<28*4;i++) {
				direcao[i]=(rightPlayer[i]);
			}
		}
		for(int i=0;i<4;i++) {
			//g.drawImage(direcao[24+i],i*80,0, null);
		}
		
		if(!transformado) {
			if(atacando) {
				if(indexAtk==23 || indexAtk==24) {
					g.drawImage(direcao[indexAtk], this.getX() - Camera.x,this.getY() - Camera.y, null);
				}else {
					if(dir==right_dir) {
						g.drawImage(direcao[indexAtk], this.getX()+9 - Camera.x,this.getY() - Camera.y, null);
					}else {
						g.drawImage(direcao[indexAtk], this.getX()-9 - Camera.x,this.getY() - Camera.y, null);
					}
				}
			}else if(atacando2) {
				g.drawImage(direcao[indexAtk2], this.getX() - Camera.x,this.getY() - Camera.y, null);
			}else if(dash) {
				g.drawImage(direcao[indexDash], this.getX() - Camera.x,this.getY() - Camera.y, null);
			}else if(dashS) {
				g.drawImage(direcao[indexDashS], this.getX() - Camera.x,this.getY() - Camera.y, null);
			}else if(dashS2) {
				g.drawImage(direcao[indexDashS], this.getX() - Camera.x,this.getY() - Camera.y, null);
			}else if(subindo) {
				g.drawImage(direcao[indexPul], this.getX() - Camera.x,this.getY() - Camera.y, null);
			}else if(caindo) {
				g.drawImage(direcao[indexCai], this.getX() - Camera.x,this.getY() - Camera.y, null);
			}else {
				g.drawImage(direcao[index], this.getX() - Camera.x,this.getY() - Camera.y, null);
				
			}
			if(life<maxlife/2) {
				if(atacando) {
					if(indexAtk==23 || indexAtk==24) {
						g.drawImage(direcao[indexAtk+58], this.getX() - Camera.x,this.getY() - Camera.y, null);
					}else {
						if(dir==right_dir) {
							g.drawImage(direcao[indexAtk+58], this.getX()+9 - Camera.x,this.getY() - Camera.y, null);
						}else {
							g.drawImage(direcao[indexAtk+58], this.getX()-9 - Camera.x,this.getY() - Camera.y, null);
						}
					}
				}else if(atacando2) {
					g.drawImage(direcao[indexAtk2+58], this.getX() - Camera.x,this.getY() - Camera.y, null);
				}else if(dash) {
					g.drawImage(direcao[indexDash+58], this.getX() - Camera.x,this.getY() - Camera.y, null);
				}else if(dashS) {
					g.drawImage(direcao[indexDashS+58], this.getX() - Camera.x,this.getY() - Camera.y, null);
				}else if(dashS2) {
					g.drawImage(direcao[indexDashS+58], this.getX() - Camera.x,this.getY() - Camera.y, null);
				}else if(subindo) {
					g.drawImage(direcao[indexPul+58], this.getX() - Camera.x,this.getY() - Camera.y, null);
				}else if(caindo) {
					g.drawImage(direcao[indexCai+58], this.getX() - Camera.x,this.getY() - Camera.y, null);
				}else {
					g.drawImage(direcao[index+58], this.getX() - Camera.x,this.getY() - Camera.y, null);
				}
			}
			if(special>maxspecial/2) {
				if(atacando) {
					if(indexAtk==23 || indexAtk==24) {
						g.drawImage(direcao[indexAtk+30], this.getX() - Camera.x,this.getY() - Camera.y, null);
					}else {
						if(dir==right_dir) {
							g.drawImage(direcao[indexAtk+30], this.getX()+9 - Camera.x,this.getY() - Camera.y, null);
						}else {
							g.drawImage(direcao[indexAtk+30], this.getX()-9 - Camera.x,this.getY() - Camera.y, null);
						}
					}
				}else if(atacando2) {
					g.drawImage(direcao[indexAtk2+30], this.getX() - Camera.x,this.getY() - Camera.y, null);
				}else if(dash) {
					g.drawImage(direcao[indexDash+30], this.getX() - Camera.x,this.getY() - Camera.y, null);
				}else if(dashS) {
					g.drawImage(direcao[indexDashS+30], this.getX() - Camera.x,this.getY() - Camera.y, null);
				}else if(dashS2) {
					g.drawImage(direcao[indexDashS+30], this.getX() - Camera.x,this.getY() - Camera.y, null);
				}else if(subindo) {
					g.drawImage(direcao[indexPul+30], this.getX() - Camera.x,this.getY() - Camera.y, null);
				}else if(caindo) {
					g.drawImage(direcao[indexCai+30], this.getX() - Camera.x,this.getY() - Camera.y, null);
				}else {
					g.drawImage(direcao[index+30], this.getX() - Camera.x,this.getY() - Camera.y, null);
				}
			}
		}else {
			if(atacando) {
				if(indexAtk==23 || indexAtk==24) {
					g.drawImage(direcao[indexAtk+86], this.getX() - Camera.x,this.getY() - Camera.y, null);
				}else {
					if(dir==right_dir) {
						g.drawImage(direcao[indexAtk+86], this.getX()+9 - Camera.x,this.getY() - Camera.y, null);
					}else {
						g.drawImage(direcao[indexAtk+86], this.getX()-9 - Camera.x,this.getY() - Camera.y, null);
					}
				}
			}else if(atacando2) {
				g.drawImage(direcao[indexAtk2+86], this.getX() - Camera.x,this.getY() - Camera.y, null);
			}else if(dash) {
				g.drawImage(direcao[indexDash+86], this.getX() - Camera.x,this.getY() - Camera.y, null);
			}else if(dashS) {
				g.drawImage(direcao[indexDashS+86], this.getX() - Camera.x,this.getY() - Camera.y, null);
			}else if(dashS2) {
				g.drawImage(direcao[indexDashS+86], this.getX() - Camera.x,this.getY() - Camera.y, null);
			}else if(subindo) {
				g.drawImage(direcao[indexPul+86], this.getX() - Camera.x,this.getY() - Camera.y, null);
			}else if(caindo) {
				g.drawImage(direcao[indexCai+86], this.getX() - Camera.x,this.getY() - Camera.y, null);
			}else {
				g.drawImage(direcao[index+86], this.getX() - Camera.x,this.getY() - Camera.y, null);
			}
		}
//		int offX=0;
//		int offY=230;
//		Rectangle borda= new Rectangle(offX+Game.TILE_SIZE*2,offY, Game.TILE_SIZE*4, Game.TILE_SIZE*2);
//		g.setColor(Color.white);
//		g.fillRect(offX,offY, Game.TILE_SIZE*2, Game.TILE_SIZE*2);
//		g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.7f));
//		g.fillRect(offX+Game.TILE_SIZE*2,offY, Game.TILE_SIZE*4, Game.TILE_SIZE*2);
//		g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1));
//		g.setColor(Color.black);
//		g2.draw(borda);
//		life=50;
//		g.drawString("TESTANDO 1 2 3 TESTANDO",offX+Game.TILE_SIZE*2+20,offY+20);
//		g.drawImage(Game.spritesheet.getSprite(0*Game.TILE_SIZE,7*Game.TILE_SIZE,Game.TILE_SIZE*2,Game.TILE_SIZE*2),
//				offX,offY,(int)(Game.TILE_SIZE*2),Game.TILE_SIZE*2, null);
//		int offX2=Game.TILE_SIZE5;
//		int offY2=230;
//		Rectangle borda2= new Rectangle(offX2-Game.TILE_SIZE*4,offY2, Game.TILE_SIZE*4, Game.TILE_SIZE-1);
//		g.setColor(Color.white);
//		g.fillRect(offX2,offY2, Game.TILE_SIZE, Game.TILE_SIZE);
//		g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.7f));
//		g.fillRect(offX2-Game.TILE_SIZE*4,offY2, Game.TILE_SIZE*4, Game.TILE_SIZE-1);
//		g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1));
//		g.setColor(Color.black);
//		g2.draw(borda2);
//		life=100;
//		g.drawString("TESTANDO 1 2 3 TESTANDO",offX2-Game.TILE_SIZE*4+20,offY+20);
//		g.drawImage(Game.spritesheet.getSprite(0*Game.TILE_SIZE,9*Game.TILE_SIZE,Game.TILE_SIZE,Game.TILE_SIZE),
//				offX2,offY2,(int)(Game.TILE_SIZE),Game.TILE_SIZE, null);
		
//		if(!isDamaged) {
//			
//		}else {
//			g.drawImage(playerDamage, this.getX()-Camera.x, this.getY() - Camera.y,null);
//			
//		}
	}

}
